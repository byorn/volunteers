<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	xmlns:context="http://www.springframework.org/schema/context"
	>

   
   <http auto-config="true" use-expressions="true">
		
		<intercept-url pattern="/dashboardRecruiter" access="hasRole('ROLE_USER')" /> 
		
		
		<form-login
		   
		        always-use-default-target='true'
		        default-target-url="/dashboardRecruiter"
				authentication-failure-url="/loginfailed"/>
		
		
				
		<!-- <form-login login-page="/login" always-use-default-target='true' 
		    default-target-url="dashboard"
		    
		    authentication-success-handler-ref="ajaxAuthenticationSuccessHandler"
		     authentication-failure-handler-ref="ajaxAuthenticationFailureHandler"
			authentication-failure-url="/loginfailed" />
		 -->
			
		<logout logout-success-url="/welcome" />
	</http>

	<authentication-manager alias="authenticationManager">
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				
				users-by-username-query="
					select username,password, enabled 
					from users where username=?" 
				
				authorities-by-username-query="
					select u.username, ur.authority from users u, user_roles ur 
					where u.user_role_id = ur.user_role_id and u.username =?  " 
					
			/>
		</authentication-provider>
	</authentication-manager>

</beans:beans>